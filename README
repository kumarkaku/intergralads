About the Application:
_______________________

This is a python application that gives number of trains and their pertinent details that are heading towards "Huntington" station on Yellow Line at the time.

This application is customized to answer only above question. It so happens that on Yellow Line Huntington station is one of the end point. Because of it it's matter of identifying the StationCode and lookup on Running trains on Yellow Line with ServiceType "Normal" and DestinationCode = StationCode.

Recommendations to Generalize the application:
--------------------------------------------

How to make it generic to work for any given station and given Line?
- Given station can be any where on the line not necessarily an end point
- If that is the case then trains can head towards the station from both directions.
- We should first find 2 end points for a given Line using station list api
- Using standard route api get ordered sequence of circuitids for given Line.
- A train can be at a state where it’s already passed station of interest in which case it wouldn’t count towards. To achieve that we need to identify set of circuitids that comes before interested station in a given track. With reference to station code split the ordered sequence into two parts each subset is of interest in a given direction.
- Fetch all the trains of service type “Normal” on the line of interest on Track 1. If circuitid is before the circuitid of the station which means the train is heading towards the station so count it in. If not ignore. 
- Repeat above logic for Track 2 and using second subset of circuitids.


Note:
----------

This is a Beta version only. Here are few recommendations to make this more robust towards productionizing.

* Parameterize the inputs and take out all the hardcoded values.
* Make sure that versions of python libs used are stable and secure.
* Unit tests to be written
* There are some static data elements for which we do not have to make network calls for every run, so consider to cache and fetch on frequency basis to reduce network load.


Building Docker Image with Code:
--------------------------------

Prerequisite: 
    * Platform is Linux 
    * Docker engine is installed and running.

Building Docker:
----------------
* checkout code from https://github.com/kumarkaku/intergralads.git
* bash build-docker.sh

Running Application:
--------------------

* bash run-docker.sh

You should see an output similar to this:

Total Number of trains heading towards Huntington: 4
[
  {
    "TrainId": "002",
    "TrainNumber": "348",
    "CarCount": 6,
    "DirectionNum": 2,
    "CircuitId": 2364,
    "DestinationStationCode": "C15",
    "LineCode": "YL",
    "SecondsAtLocation": 35,
    "ServiceType": "Normal"
  },
  {
    "TrainId": "269",
    "TrainNumber": "346",
    "CarCount": 6,
    "DirectionNum": 2,
    "CircuitId": 1230,
    "DestinationStationCode": "C15",
    "LineCode": "YL",
    "SecondsAtLocation": 48,
    "ServiceType": "Normal"
  },
  {
    "TrainId": "316",
    "TrainNumber": "344",
    "CarCount": 8,
    "DirectionNum": 2,
    "CircuitId": 3512,
    "DestinationStationCode": "C15",
    "LineCode": "YL",
    "SecondsAtLocation": 74,
    "ServiceType": "Normal"
  },
  {
    "TrainId": "386",
    "TrainNumber": "342",
    "CarCount": 6,
    "DirectionNum": 2,
    "CircuitId": 1148,
    "DestinationStationCode": "C15",
    "LineCode": "YL",
    "SecondsAtLocation": 36,
    "ServiceType": "Normal"
  }
]   



API References:
   Docs: https://developer.wmata.com/docs/services/
   key: https://developer.wmata.com/demokey




